plugins {
    id 'kotlin-multiplatform' version '1.3.0-rc-190'
}
repositories {
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}
kotlin {
    targets {
        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        // For Linux, preset should be changed to e.g. presets.linuxX64
        // For MacOS, preset should be changed to e.g. presets.macosX64
        fromPreset(presets.macosX64, 'macos')
        fromPreset(presets.mingwX64, 'mingw')
        fromPreset(presets.linuxX64, 'linux')

        configure([macos, mingw, linux]) {
            compilations.main.outputKinds('DYNAMIC')
            // Change to specify fully qualified name of your application's entry point:
            //compilations.main.entryPoint = 'sample.main'

            compilations.main {
                cinterops {
                    jni {
                        //packageName 'example.cinterop.stdio'
                        //extraOpts '-nodefaultlibs'
                        // defFile 'custom/path/to/def/file.def' // by default: src/nativeInterop/cinterop/myInteropName.def
                    }
                }
            }
        }
    }
    sourceSets {
        xnativeMain
        xnativeTest

        // Note: To enable common source sets please comment out 'kotlin.import.noCommonSourceSets' property
        // in gradle.properties file and re-import your project in IDE.
        configure([mingwMain, macosMain, linuxMain]) {
            dependsOn xnativeMain
        }

        configure([mingwTest, macosTest, linuxTest]) {
            dependsOn xnativeTest
        }
    }
}

task runProgram {
    def buildType = 'release' // Change to 'debug' to run application with debug symbols.
    dependsOn "link${buildType.capitalize()}ExecutableMacos"
    doLast {
        def programFile = kotlin.targets.macos.compilations.main.getBinary('EXECUTABLE', buildType)
        exec {
            executable programFile
            args ''
        }
    }
}